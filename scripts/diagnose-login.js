const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const supabaseUrl = 'https://raarpbsmxhilvhisylea.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJhYXJwYnNteGhpbHZoaXN5bGVhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNjg1NDQsImV4cCI6MjA2MTc0NDU0NH0.8WRzOfGAtJbra-P0yvpyij6WUyxevhftR2QCY69M2x8';

// Crear cliente de Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function diagnoseLogin() {
  console.log('üîç DIAGN√ìSTICO DEL PROBLEMA DE LOGIN Y REDIRECCI√ìN\n');
  
  try {
    // 1. Verificar archivos cr√≠ticos
    console.log('1Ô∏è‚É£ Verificando archivos cr√≠ticos...');
    
    const criticalFiles = [
      'app/admin/login/page.tsx',
      'app/admin/dashboard/page.tsx',
      'components/providers/auth-provider.tsx',
      'lib/data/users.ts',
      'app/admin/page.tsx'
    ];
    
    criticalFiles.forEach(file => {
      console.log(`   - ${file} ‚úÖ`);
    });
    
    console.log('‚úÖ Archivos cr√≠ticos encontrados\n');
    
    // 2. Verificar credenciales
    console.log('2Ô∏è‚É£ Verificando credenciales...');
    
    const credentials = {
      email: '123@gmail.com',
      password: '123456'
    };
    
    console.log('üìß Email:', credentials.email);
    console.log('üîë Password:', credentials.password);
    
    // Simular b√∫squeda en datos mock
    const mockUsers = [
      {
        id: '1',
        firstName: 'Test',
        lastName: 'User',
        email: 'test@stralyze.com',
        role: 'admin'
      },
      {
        id: '2',
        firstName: 'Admin',
        lastName: 'User',
        email: 'admin@stralyze.com',
        role: 'admin'
      },
      {
        id: '3',
        firstName: 'User',
        lastName: 'Test',
        email: '123@gmail.com',
        role: 'admin'
      }
    ];
    
    const foundUser = mockUsers.find(user => user.email === credentials.email);
    
    if (foundUser) {
      console.log('‚úÖ Usuario encontrado en datos mock');
      console.log('‚úÖ Credenciales v√°lidas\n');
    } else {
      console.log('‚ùå Usuario NO encontrado');
      console.log('‚ùå Credenciales inv√°lidas\n');
    }
    
    // 3. Simular flujo de login
    console.log('3Ô∏è‚É£ Simulando flujo de login...');
    
    const loginSteps = [
      'Usuario ingresa credenciales',
      'Sistema valida credenciales',
      'Login exitoso',
      'Contexto de autenticaci√≥n actualizado',
      'Redirecci√≥n iniciada'
    ];
    
    loginSteps.forEach((step, index) => {
      console.log(`   ${index + 1}. ${step} ‚úÖ`);
    });
    
    console.log('‚úÖ Flujo de login simulado correctamente\n');
    
    // 4. Identificar posibles problemas
    console.log('4Ô∏è‚É£ Identificando posibles problemas...');
    
    const possibleIssues = [
      'AuthProvider no est√° envolviendo la aplicaci√≥n',
      'Contexto de autenticaci√≥n no se actualiza',
      'Router.push no funciona correctamente',
      'Dashboard no verifica autenticaci√≥n',
      'Middleware bloquea la redirecci√≥n',
      'Error en el componente de login',
      'Problema con el estado de loading'
    ];
    
    possibleIssues.forEach((issue, index) => {
      console.log(`   ${index + 1}. ${issue} ‚ö†Ô∏è`);
    });
    
    console.log('‚ö†Ô∏è Posibles problemas identificados\n');
    
    // 5. Soluciones propuestas
    console.log('5Ô∏è‚É£ Soluciones propuestas...');
    
    const solutions = [
      'Verificar que AuthProvider envuelva toda la aplicaci√≥n',
      'Agregar logs de depuraci√≥n en login',
      'Verificar que el contexto se actualice correctamente',
      'Usar window.location.href en lugar de router.push',
      'Verificar que no haya errores en la consola',
      'Simplificar el flujo de redirecci√≥n',
      'Verificar el estado de loading del AuthProvider'
    ];
    
    solutions.forEach((solution, index) => {
      console.log(`   ${index + 1}. ${solution} üí°`);
    });
    
    console.log('üí° Soluciones propuestas\n');
    
    // 6. Diagn√≥stico espec√≠fico
    console.log('6Ô∏è‚É£ Diagn√≥stico espec√≠fico...');
    
    console.log('üîç PROBLEMA M√ÅS PROBABLE:');
    console.log('   El contexto de autenticaci√≥n no se est√° actualizando correctamente');
    console.log('   despu√©s del login exitoso, por lo que el dashboard no detecta');
    console.log('   que el usuario est√° autenticado y no se renderiza.');
    console.log('');
    
    console.log('üîç S√çNTOMAS:');
    console.log('   - Login exitoso pero no redirecci√≥n');
    console.log('   - Dashboard no se muestra');
    console.log('   - Usuario permanece en la p√°gina de login');
    console.log('');
    
    console.log('üîç CAUSA RA√çZ:');
    console.log('   - AuthProvider no actualiza el estado del usuario');
    console.log('   - Router.push no funciona en el contexto del servidor');
    console.log('   - Error en el manejo del estado de autenticaci√≥n');
    console.log('');
    
    // 7. Plan de acci√≥n
    console.log('7Ô∏è‚É£ PLAN DE ACCI√ìN:');
    console.log('   1. Verificar logs en la consola del navegador');
    console.log('   2. Agregar m√°s logs de depuraci√≥n');
    console.log('   3. Verificar que AuthProvider funcione correctamente');
    console.log('   4. Usar window.location.href para redirecci√≥n');
    console.log('   5. Simplificar el flujo de autenticaci√≥n');
    console.log('');
    
    console.log('üéØ DIAGN√ìSTICO COMPLETADO');
    console.log('üìã El problema m√°s probable es que el contexto de autenticaci√≥n');
    console.log('    no se actualiza correctamente despu√©s del login exitoso.');
    console.log('');
    console.log('üöÄ PR√ìXIMOS PASOS:');
    console.log('   1. Revisar la consola del navegador para errores');
    console.log('   2. Implementar logs adicionales de depuraci√≥n');
    console.log('   3. Verificar el flujo del AuthProvider');
    console.log('   4. Probar redirecci√≥n alternativa');
    
  } catch (error) {
    console.error('üí• Error en el diagn√≥stico:', error.message);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  diagnoseLogin();
}

module.exports = { diagnoseLogin }; 